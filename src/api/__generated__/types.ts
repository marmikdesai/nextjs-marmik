/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    languageCode?: string;
                    countryCode?: string;
                };
                header: {
                    "api-version": string;
                    /** @description Name or indicator of where the request is coming from. */
                    Source: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["OrdersDto"];
                        "application/json": components["schemas"]["OrdersDto"];
                        "text/json": components["schemas"]["OrdersDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header: {
                    "api-version": string;
                    /** @description Name or indicator of where the request is coming from. */
                    Source: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["CancelOrdersModel"];
                    "text/json": components["schemas"]["CancelOrdersModel"];
                    "application/*+json": components["schemas"]["CancelOrdersModel"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": boolean;
                        "application/json": boolean;
                        "text/json": boolean;
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    languageCode?: string;
                    countryCode?: string;
                };
                header: {
                    "api-version": string;
                    /** @description Name or indicator of where the request is coming from. */
                    Source: string;
                };
                path: {
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["OrderDetailsDto"];
                        "application/json": components["schemas"]["OrderDetailsDto"];
                        "text/json": components["schemas"]["OrderDetailsDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CancelOrdersModel: {
            orderIds?: string[] | null;
        };
        ConfigurationDto: {
            orderNumber?: string | null;
            orderId?: string | null;
            orderType?: components["schemas"]["OrderType"];
            modelName?: string | null;
            extras?: components["schemas"]["ExtraDto"][] | null;
            date?: string | null;
            price?: string | null;
            status?: components["schemas"]["OrderStatus"];
            orderUrl?: string | null;
            estimatedDeliveryDate?: string | null;
            paymentMethod?: components["schemas"]["FinancingOption"];
            monthlyPrice?: string | null;
            displayMonthlyPrice?: boolean;
            deliveryMethod?: components["schemas"]["DeliveryMethod"];
            retailer?: string | null;
            displayRetailer?: boolean;
            lockState?: components["schemas"]["LockStates"];
            displayActionButtons?: boolean;
            tireHotelPartner?: string | null;
            wantsWinterWheelsTogetherWithCar?: boolean;
            roles?: components["schemas"]["OrderRoles"][] | null;
            readonly exteriorImageUrl?: string | null;
            extrasOrderVin?: string | null;
            exterior?: string | null;
            interior?: string | null;
            packages?: string[] | null;
            wheels?: string | null;
            engine?: string | null;
            exteriorImages?: string[] | null;
            interiorImages?: string[] | null;
        };
        DeliveredOrderDto: {
            orderNumber?: string | null;
            orderId?: string | null;
            orderType?: components["schemas"]["OrderType"];
            modelName?: string | null;
            extras?: components["schemas"]["ExtraDto"][] | null;
            date?: string | null;
            price?: string | null;
            status?: components["schemas"]["OrderStatus"];
            orderUrl?: string | null;
            estimatedDeliveryDate?: string | null;
            paymentMethod?: components["schemas"]["FinancingOption"];
            monthlyPrice?: string | null;
            displayMonthlyPrice?: boolean;
            deliveryMethod?: components["schemas"]["DeliveryMethod"];
            retailer?: string | null;
            displayRetailer?: boolean;
            lockState?: components["schemas"]["LockStates"];
            displayActionButtons?: boolean;
            tireHotelPartner?: string | null;
            wantsWinterWheelsTogetherWithCar?: boolean;
            roles?: components["schemas"]["OrderRoles"][] | null;
            readonly exteriorImageUrl?: string | null;
            extrasOrderVin?: string | null;
            handoverDate?: string | null;
            handoverTime?: string | null;
            handoverLocation?: string | null;
        };
        /** @enum {string} */
        DeliveryMethod: "None" | "Collect" | "Home" | "AtHandover" | "Personalized" | "OverTheAir" | "InstallationAtWorkshop" | "TyreHotel" | "PaidHomeDelivery";
        ExtraDto: {
            title?: string | null;
            status?: components["schemas"]["OrderStatus"];
            price?: string | null;
            total?: string | null;
            quantity?: string | null;
            relatedTo?: string | null;
            deliveryMethod?: components["schemas"]["DeliveryMethod"];
            locationDetails?: components["schemas"]["LocationDetailsModel"];
            featuredImageUrl?: string | null;
            scheduledInstallationTime?: string | null;
        };
        /** @enum {string} */
        FinancingOption: "None" | "Cash" | "Loan" | "Leasing" | "Subscription" | "PersonalLoan" | "PersonalLeasing" | "FinancialLeasing" | "LoanWithBalloon" | "LoanWithBalloonGFV" | "OperationalLeasing";
        LocationDetailsModel: {
            address?: string | null;
            city?: string | null;
            zipCode?: string | null;
            locationCode?: string | null;
            name?: string | null;
            stateCode?: string | null;
        };
        /** @enum {string} */
        LockStates: "locked" | "unlocked";
        OrderDetailsConfigurationDto: {
            model?: string | null;
            vin?: string | null;
            exteriorImageUrl?: string | null;
            version?: string | null;
            exterior?: string | null;
            interior?: string | null;
            packs?: string[] | null;
            wheels?: string | null;
        };
        OrderDetailsCustomerDto: {
            firstName?: string | null;
            lastName?: string | null;
        };
        OrderDetailsDto: {
            customer?: components["schemas"]["OrderDetailsCustomerDto"];
            createdAt?: string | null;
            status?: string | null;
            orderNumber?: string | null;
            handover?: components["schemas"]["OrderDetailsHandoverDto"];
            configuration?: components["schemas"]["OrderDetailsConfigurationDto"];
            extras?: components["schemas"]["OrderDetailsExtraDto"][] | null;
        };
        OrderDetailsExtraDto: {
            productCategory?: string | null;
            title?: string | null;
        };
        OrderDetailsHandoverDto: {
            completedAt?: string | null;
            location?: components["schemas"]["OrderDetailsHandoverLocationDto"];
        };
        OrderDetailsHandoverLocationDto: {
            name?: string | null;
            address?: string | null;
            zipCode?: string | null;
            city?: string | null;
            countryCode?: string | null;
            stateCode?: string | null;
        };
        OrderDto: {
            orderNumber?: string | null;
            orderId?: string | null;
            orderType?: components["schemas"]["OrderType"];
            modelName?: string | null;
            extras?: components["schemas"]["ExtraDto"][] | null;
            date?: string | null;
            price?: string | null;
            status?: components["schemas"]["OrderStatus"];
            orderUrl?: string | null;
            estimatedDeliveryDate?: string | null;
            paymentMethod?: components["schemas"]["FinancingOption"];
            monthlyPrice?: string | null;
            displayMonthlyPrice?: boolean;
            deliveryMethod?: components["schemas"]["DeliveryMethod"];
            retailer?: string | null;
            displayRetailer?: boolean;
            lockState?: components["schemas"]["LockStates"];
            displayActionButtons?: boolean;
            tireHotelPartner?: string | null;
            wantsWinterWheelsTogetherWithCar?: boolean;
            roles?: components["schemas"]["OrderRoles"][] | null;
            readonly exteriorImageUrl?: string | null;
            extrasOrderVin?: string | null;
        };
        /** @enum {string} */
        OrderRoles: "driver" | "orderer";
        /** @enum {string} */
        OrderStatus: "None" | "Submitted" | "Confirmed" | "Planned" | "Delivered" | "Returned" | "PendingReturn" | "PartiallyDelivered" | "Ordered" | "ReadyForDelivery" | "Expired";
        /** @enum {string} */
        OrderType: "None" | "PreOrder" | "Order" | "Fleet" | "Preconfigured" | "Remarketed" | "Extras";
        OrdersDto: {
            activeOrders?: components["schemas"]["OrderDto"][] | null;
            deliveredOrders?: components["schemas"]["DeliveredOrderDto"][] | null;
            savedConfigurations?: components["schemas"]["ConfigurationDto"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
